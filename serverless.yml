service: entity-import

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  # releasedVersion: v1
  versionFunctions: false
  stackName: ${self:service}-${self:custom.stage}
  region: ap-southeast-1 # this is the region that we deploy our lambda to
  environment:
    item_table: Entity-${self:custom.stage}
    item_table_invoice: invoices-${self:custom.stage}
    item_table_setting: settings-${self:custom.stage}
    url: https://${self:custom.stage}
  iamRoleStatements:
    - Effect: "Allow" # or Deny
      Resource: "*"
      Action: # this is the action against dynamodbservice-item
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:BatchWriteItem"
    - Effect: "Allow"
      Resource: "*"
      Action:
        - "sqs:*"

# plugins:
#   - serverless-domain-manager
package:
  individually: true
  patterns:
    - "!**/*"
custom:
  stage: ${opt:stage, self:provider.stage}
  # domains:
  #   prod: apis.banhji.com
  #   staging: staging-apis.banhji.com
  #   dev: dev-apis.banhji.com
  # customDomain:
  #   basePath: ${self:service}
  #   domainName: ${self:custom.domains.${self:custom.stage}}
  #   stage: ${opt:stage, self:provider.stage}
  #   certificateName: "*.banhji.com"
  #   createRout53Record: true
# resouces to be used on aws; these are dynamodb with auto create when deploy
#resources:
#  Resources:
#    itemTable:
#      Type: 'AWS::DynamoDB::Table'
#      DeletionPolicy: Retain
#      Properties:
#        AttributeDefinitions:
#          - AttributeName: pk
#            AttributeType: S
#          - AttributeName: sk
#            AttributeType: S
#        KeySchema:
#          - AttributeName: pk
#            KeyType: HASH
#          - AttributeName: sk
#            KeyType: RANGE
#        BillingMode: PAY_PER_REQUEST
#        TableName: ${self:provider.environment.item_table}

functions:
  import-invoice:
    handler: api/Invoice/importInvoices.import
    package:
      patterns:
        - config/**
        - api/Invoice/importInvoices.js
      individually: true
    events:
      - http:
          path: importInvoices/institute/{institute_id}/import
          method: post
          cors: true
          request:
            parameters:
              paths:
                institute_id: true
  sqs-invoice:
    handler: api/sqs/sqsInvoice.consumer
    package:
      patterns:
        - config/**
        - api/function/**
        - node_modules/**
        - "!node_modules/aws-sdk/**"
        - api/model/InvoiceModel.js
        - api/sqs/sqsInvoice.js
      individually: true
    events:
      - sqs: arn:aws:sqs:ap-southeast-1:207186326779:ImportInvoices-${self:custom.stage}